!function(){const t=function(t,e){return window.webkit.messageHandlers.bluetooth.postMessage({action:t,data:e})};class e extends EventTarget{constructor(t,e,s){super(),this.device=t,this.uuid=e,this.isPrimary=s}}class s{constructor(s){this.connect=async()=>{const e=await t("connect",{uuid:this.device.uuid});return this.connected=e.connected,this},this.disconnect=async()=>{const e=await t("disconnect",{uuid:this.device.uuid});this.connected=!e.disconnected},this.getPrimaryServices=async s=>(await t("getPrimaryServices",{uuid:this.device.uuid,bluetoothServiceUUID:s})).primaryServices.map((t=>new e(this.device,t,!0))),this.device=s,this.connected=!1}}class i{constructor(t){this.id=t,this.isEmpty=()=>0===this.targets.length,this.addTarget=(t,e)=>{this.targets.push({name:t,target:e})},this.removeTarget=t=>{this.targets=this.targets.filter((e=>e.name!==t))},this.postMessage=t=>{const e=this.targets.find((e=>e.name===t.type));e&&e.target.dispatchEvent(t)},this.id=t,this.targets=[]}}const a=new class{constructor(){this.addTarget=(t,e,s)=>{let a=this.dispatchers.find((e=>e.id===t));a||(a=new i(t),this.dispatchers.push(a)),a.addTarget(e,s)},this.removeTarget=(t,e)=>{const s=this.dispatchers.find((e=>e.id===t));s&&s.removeTarget(e),s.isEmpty()&&(this.dispatchers=this.dispatchers.filter((e=>e.id!==t)))},this.removeAllTargets=t=>{this.dispatchers=this.dispatchers.filter((e=>e.id!==t))},this.postMessage=(t,e)=>{const s=this.dispatchers.find((e=>e.id===t));s&&s.postMessage(e)},this.dispatchers=[]}};class n extends EventTarget{constructor(t,e){super(),this.uuid=t,this.name=e,this.gatt=new s(this),a.addTarget(t,"gattserverdisconnected",this)}}class c extends EventTarget{constructor(){super(),this.onavailabilitychanged=t=>{},this.getAvailability=async()=>(await t("getAvailability")).isAvailable,this.getDevices=async()=>(await t("getDevices")).map((t=>new n(t.uuid,t.name))),this.requestDevice=async e=>{const s=await t("requestDevice",{options:e});return new n(s.uuid,s.name)},a.addTarget("bluetooth","availabilitychanged",this),this.addEventListener("availabilitychanged",(t=>{this.onavailabilitychanged(t)}))}}class r extends Event{constructor(t,e){super(t,e),this.value=null==e?void 0:e.value}}class h{constructor(){this.sendEvent=t=>{!function(t){const e=new r(t.name,{value:t.data});a.postMessage(t.id,e)}(t)},this.bluetooth=new c}}void 0===navigator.bluetooth&&(globalThis.topaz=new h,navigator.bluetooth=globalThis.topaz.bluetooth)}();

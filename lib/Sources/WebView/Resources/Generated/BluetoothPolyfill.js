!function(){const e=e=>{throw(e=>{try{const t=JSON.parse(e.message);return new DOMException(t.msg,t.name)}catch(t){return new TypeError(`${t} when decoding "${e}"`)}})(e)},t=function(t,i){return window.webkit.messageHandlers.bluetooth.postMessage({action:t,data:i}).catch(e)};function i(e,t,i,s){if("a"===i&&!s)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!s:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===i?s:"a"===i?s.call(e):s?s.value:t.get(e)}function s(e,t,i,s,r){if("m"===s)throw new TypeError("Private method is not writable");if("a"===s&&!r)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===s?r.call(e,i):r?r.value=i:t.set(e,i),i}var r;"function"==typeof SuppressedError&&SuppressedError;class a extends EventTarget{constructor(e,t,i,a){super(),this.service=e,this.uuid=t,this.properties=i,r.set(this,void 0),s(this,r,a,"f"),this.value=null}}r=new WeakMap;class c{constructor(e){this.id=e,this.isEmpty=()=>0===this.targets.length,this.addTarget=(e,t)=>{this.targets.push({name:e,target:t})},this.removeTarget=e=>{this.targets=this.targets.filter((t=>t.name!==e))},this.postMessage=e=>{const t=this.targets.find((t=>t.name===e.type));t&&t.target.dispatchEvent(e)},this.id=e,this.targets=[]}}const n=new class{constructor(){this.addTarget=(e,t,i)=>{let s=this.dispatchers.find((t=>t.id===e));s||(s=new c(e),this.dispatchers.push(s)),s.addTarget(t,i)},this.removeTarget=(e,t)=>{const i=this.dispatchers.find((t=>t.id===e));i&&i.removeTarget(t),i.isEmpty()&&(this.dispatchers=this.dispatchers.filter((t=>t.id!==e)))},this.removeAllTargets=e=>{this.dispatchers=this.dispatchers.filter((t=>t.id!==e))},this.postMessage=(e,t)=>{const i=this.dispatchers.find((t=>t.id===e));i&&i.postMessage(t)},this.dispatchers=[]}};var o;const d=(e,t)=>e+"."+t;o=new WeakMap;const h=new class{constructor(){o.set(this,void 0),this.getDevice=e=>{const t=i(this,o,"f").get(e);if(t)return t.device},this.addDevice=e=>{const t=i(this,o,"f").get(e.uuid);t&&n.removeTarget(t.device.uuid,"gattserverdisconnected"),i(this,o,"f").set(e.uuid,{uuid:e.uuid,device:e,services:new Map})},this.getService=(e,t)=>{var s,r;return null===(r=null===(s=i(this,o,"f").get(e))||void 0===s?void 0:s.services.get(t))||void 0===r?void 0:r.service},this.addService=e=>{const t=i(this,o,"f").get(e.device.uuid);if(!t)throw new ReferenceError(`Device ${e.device.uuid} not found`);t.services.set(e.uuid,{uuid:e.uuid,service:e,characteristics:new Map})},this.getCharacteristic=(e,t,s)=>{var r,a;return null===(a=null===(r=i(this,o,"f").get(e.device.uuid))||void 0===r?void 0:r.services.get(e.uuid))||void 0===a?void 0:a.characteristics.get(d(t,s))},this.addCharacteristic=(e,t,s)=>{var r;const a=null===(r=i(this,o,"f").get(e.device.uuid))||void 0===r?void 0:r.services.get(e.uuid);if(!a)throw new ReferenceError(`Service ${e.uuid} not found`);a.characteristics.set(d(t.uuid,s),t)},this.findCharacteristic=e=>{for(const t of i(this,o,"f").values())for(const i of t.services.values()){const t=i.characteristics.get(e);if(t)return t}},this.updateCharacteristicValue=(e,t)=>{const i=this.findCharacteristic(e);if(!i)throw new ReferenceError(`Characteristic ${e} not found`);i.value=t},s(this,o,new Map,"f")}};class u extends EventTarget{constructor(e,i,s){super(),this.GetGATTChildren=async(e,i)=>(await t("discoverCharacteristics",{device:this.device.uuid,service:this.uuid,characteristic:i,single:e})).characteristics.map((e=>((e,t,i,s)=>{const r=h.getCharacteristic(e,t,s);if(r)return r;const c=new a(e,t,i,s);return h.addCharacteristic(e,c,s),c})(this,e.uuid,e.properties,e.instance))),this.getCharacteristic=async e=>{if(void 0===e)throw new TypeError("Missing 'characteristic' UUID parameter.");return(await this.GetGATTChildren(!0,e))[0]},this.getCharacteristics=async e=>this.GetGATTChildren(!1,e),this.device=e,this.uuid=i,this.isPrimary=s}}class v{constructor(e){this.connect=async()=>{const e=await t("connect",{uuid:this.device.uuid});return this.connected=e.connected,this},this.disconnect=async()=>{const e=await t("disconnect",{uuid:this.device.uuid});this.connected=!e.disconnected},this.GetGATTChildren=async(e,i)=>(await t("discoverServices",{device:this.device.uuid,service:i,single:e})).services.map((e=>((e,t,i)=>{const s=h.getService(e.uuid,t);if(s)return s;const r=new u(e,t,i);return h.addService(r),r})(this.device,e,!0))),this.getPrimaryService=async e=>{if(void 0===e)throw new TypeError("Missing 'bluetoothServiceUUID' parameter.");return(await this.GetGATTChildren(!0,e))[0]},this.getPrimaryServices=async e=>this.GetGATTChildren(!1,e),this.device=e,this.connected=!1}}class l extends EventTarget{constructor(e,t){super(),this.uuid=e,this.name=t,this.gatt=new v(this),n.addTarget(e,"gattserverdisconnected",this)}}const g=(e,t)=>{const i=new l(e,t);return h.addDevice(i),i};class p extends EventTarget{constructor(){super(),this.onavailabilitychanged=e=>{},this.getAvailability=async()=>(await t("getAvailability")).isAvailable,this.getDevices=async()=>(await t("getDevices")).map((e=>g(e.uuid,e.name))),this.requestDevice=async e=>{const i=await t("requestDevice",{options:e});return g(i.uuid,i.name)},n.addTarget("bluetooth","availabilitychanged",this),this.addEventListener("availabilitychanged",(e=>{this.onavailabilitychanged(e)}))}}const f=e=>new DataView((e=>Uint8Array.from(atob(e),(e=>e.codePointAt(0))))(e).buffer);class w extends Event{constructor(e,t){super(e,t),this.value=null==t?void 0:t.value}}class m{constructor(){this.sendEvent=e=>{if("characteristicvaluechanged"===e.name){const t=f(e.data);h.updateCharacteristicValue(e.id,t)}!function(e){const t=new w(e.name,{value:e.data});n.postMessage(e.id,t)}(e)},this.bluetooth=new p}}void 0===navigator.bluetooth&&(globalThis.topaz=new m,navigator.bluetooth=globalThis.topaz.bluetooth)}();

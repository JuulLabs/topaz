!function(){const t=t=>{throw(t=>{try{const e=JSON.parse(t.message);return new DOMException(e.msg,e.name)}catch(e){return new TypeError(`${e} when decoding "${t}"`)}})(t)},e=function(e,s){return window.webkit.messageHandlers.bluetooth.postMessage({action:e,data:s}).catch(t)};class s extends EventTarget{constructor(t,e,s){super(),this.device=t,this.uuid=e,this.isPrimary=s}}class i{constructor(t){this.connect=async()=>{const t=await e("connect",{uuid:this.device.uuid});return this.connected=t.connected,this},this.disconnect=async()=>{const t=await e("disconnect",{uuid:this.device.uuid});this.connected=!t.disconnected},this.getPrimaryServices=async t=>(await e("getPrimaryServices",{uuid:this.device.uuid,bluetoothServiceUUID:t})).services.map((t=>new s(this.device,t,!0))),this.device=t,this.connected=!1}}class a{constructor(t){this.id=t,this.isEmpty=()=>0===this.targets.length,this.addTarget=(t,e)=>{this.targets.push({name:t,target:e})},this.removeTarget=t=>{this.targets=this.targets.filter((e=>e.name!==t))},this.postMessage=t=>{const e=this.targets.find((e=>e.name===t.type));e&&e.target.dispatchEvent(t)},this.id=t,this.targets=[]}}const n=new class{constructor(){this.addTarget=(t,e,s)=>{let i=this.dispatchers.find((e=>e.id===t));i||(i=new a(t),this.dispatchers.push(i)),i.addTarget(e,s)},this.removeTarget=(t,e)=>{const s=this.dispatchers.find((e=>e.id===t));s&&s.removeTarget(e),s.isEmpty()&&(this.dispatchers=this.dispatchers.filter((e=>e.id!==t)))},this.removeAllTargets=t=>{this.dispatchers=this.dispatchers.filter((e=>e.id!==t))},this.postMessage=(t,e)=>{const s=this.dispatchers.find((e=>e.id===t));s&&s.postMessage(e)},this.dispatchers=[]}};class c extends EventTarget{constructor(t,e){super(),this.uuid=t,this.name=e,this.gatt=new i(this),n.addTarget(t,"gattserverdisconnected",this)}}class r extends EventTarget{constructor(){super(),this.onavailabilitychanged=t=>{},this.getAvailability=async()=>{const s=await e("getAvailability");var i;return i=`Bluetooth availability responded with ${s.isAvailable}`,window.webkit.messageHandlers.logging.postMessage({msg:i}).catch(t),s.isAvailable},this.getDevices=async()=>(await e("getDevices")).map((t=>new c(t.uuid,t.name))),this.requestDevice=async t=>{const s=await e("requestDevice",{options:t});return new c(s.uuid,s.name)},n.addTarget("bluetooth","availabilitychanged",this),this.addEventListener("availabilitychanged",(t=>{this.onavailabilitychanged(t)}))}}class h extends Event{constructor(t,e){super(t,e),this.value=null==e?void 0:e.value}}class o{constructor(){this.sendEvent=t=>{!function(t){const e=new h(t.name,{value:t.data});n.postMessage(t.id,e)}(t)},this.bluetooth=new r}}void 0===navigator.bluetooth&&(globalThis.topaz=new o,navigator.bluetooth=globalThis.topaz.bluetooth)}();
